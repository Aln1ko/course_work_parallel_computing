@startuml
class Server {
  - ipAddress: String
  - port: int
  - threadPool: ThreadPool
  + startServer(): void
  + stopServer(): void
  + acceptRequest(request: ClientRequest): void
}

class ClientRequest {
  - clientId: String
  + getClientId(): String
  
}

class Index {
  - data: Map<String, List<Document>>
  - files: std::vector<string>
  + addDocument(doc: Document): void
  + search(query: String): List<Document>
  + updateIndex(newDocuments: List<Document>): void
}

class Document {
  - id: String
  - content: String
  + getContent(): String
}

class Task {
  - my_id: int
  - my_time: int
  {field}- f: std::function<void(int, int)>
  + Task(int id, int time)
  + Task()
  + get_time(): int
  + get_id(): int
  + get_f(): std::function<void(int, int)>
}


class MyQueue {
  - all_time: int
  - q: std::queue<Task>
  + push(t: Task): void
  + front_and_pop(): Task
  + size(): int
  + empty(): bool
  + front(): Task
  + get_all_time(): int
  + set_all_time(time: int): void
}

class ThreadPool {
  - consumer_threads: std::vector<std::thread>
  - num_consumers: int
  - queue1: MyQueue
  - queue2: MyQueue
  - m: std::mutex
  - m_status: std::mutex
  - finished: bool
  - paused: bool
  - working_to_the_end: bool
  + initialize(consumers: int): void
  + push_task(t: Task): void
  - consume(q: MyQueue): void
  + pause(): void
  + resume(): void
  + finish(): void
  + working_to_the_end_finish(): void
  + get_size_q1(): int
  + get_size_q2(): int
  + get_finished(): bool
  + get_working_to_the_end(): bool
  + ~ThreadPool(): void
}

ThreadPool *-- Task
ThreadPool *-- MyQueue
MyQueue *-- Task
Server --> ThreadPool
Server --> ClientRequest
Index --> Document
Server --> Index
@enduml